openapi: "3.0.1"
info:
  title: "Toy Credential Issuer Private Api"
  version: "1.0"

paths:
  /authorization:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-AuthorizationFunctionTS/invocations
        passthroughBehavior: "when_no_match"

  /session:
    post:
      summary: IP address of the client.
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-SessionFunctionTS/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /favourite:
    post:
      summary: IP address of the client.
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Favourite"
        required: true
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavouriteFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

components:
  parameters:
    SessionHeader:
      name: session-id
      in: header
      description: A UUID generated by the Session API to act as a primary key for the Session in DynamoDB
      required: true
      schema:
        type: "string"
  schemas:
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          type: "string"
          minLength: 1
          example: "ipv-core-stub"
        request:
          type: "string"
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "981bb74c-3b5e-462e-ba3a-abf868e5da68"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    Favourite:
      type: "object"
      properties:
        toy:
          type: "string"

    Error:
      title: "Error Schema"
      type: "object"
      properties:
        message:
          type: "string"
    Session:
      required:
        - "session_id"
      type: "object"
      properties:
        session_id:
          type: "string"

x-amazon-apigateway-request-validators:
  Validate both:
    validateRequestBody: true
    validateRequestParameters: true
  Validate Param only:
    validateRequestParameters: true
    validateRequestBody: false
