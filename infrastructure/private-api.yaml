openapi: "3.0.1"
info:
  title: "Toy Credential Issuer Private Api"
  version: "1.0"

paths:
  /authorization:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
              examples:
                scenario-1:
                  summary: "Complete happy path (Scenario 1)"
                  value:
                    code: "scenario-1"
                    state: "state"
                    redirect_uri: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
                scenario-2:
                  summary: "Partial happy path (Scenario 2)"
                  value:
                    code: "scenario-2"
                    state: "state"
                    redirect_uri: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
                scenario-3:
                  summary: "Partial happy path (Scenario 3)"
                  value:
                    code: "scenario-3"
                    state: "state"
                    redirect_uri: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-AuthorizationFunctionTS/invocations
        passthroughBehavior: "when_no_match"

  /session:
    post:
      summary: IP address of the client.
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
            format: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
            examples:
              scenario-1:
                description: Scenario 1 Happy path
                value: scenario-1-happy
              scenario-1-400:
                description: 400 at auth
                value: scenario-1-auth-400
              scenario-1-500:
                description: 500 at auth
                value: scenario-1-auth-500
              scenario-2:
                description: Scenario 2
                value: scenario-2
              scenario-3:
                description: Scenario 3
                value: scenario-3
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              examples:
                session-s1-good:
                  summary: "Good session > Good auth > Good token > Good CI (Scenario 1)"
                  value:
                    session_id: "scenario-1"

                session-s1-auth-400:
                  summary: "Good session > Bad auth 400 (Scenario 1)"
                  value:
                    session_id: "scenario-1-400"

                session-s1-auth-500:
                  summary: "Good session > Bad auth 500 (Scenario 1)"
                  value:
                    session_id: "scenario-1-500"

                session-s2:
                  summary: "Good session > Good auth > Bad token (Scenario 2)"
                  value:
                    session_id: "scenario-2"

                session-s3:
                  summary: "Good session > Good auth > Good token > Bad CI (Scenario 2)"
                  value:
                    session_id: "scenario-3"

                sessionSuccessTowardsBadAuth400:
                  summary: "Good session > Bad auth 400 (Scenario 1)"
                  value:
                    session_id: "bad400"
                sessionSuccessTowardsBadAuth500:
                  summary: "Good session > Bad auth 500 (Scenario 1)"
                  value:
                    session_id: "bad500"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommonStackName}-SessionFunctionTS/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /favourite:
    post:
      summary: IP address of the client.
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Favourite"
            examples:
              jigsaw-puzzle:
                summary: 200 path - jigsaw-puzzle
                value:
                  toy: "jigsaw-puzzle"
              train-set:
                summary: 200 path - train-set
                value:
                  toy: "train-set"
              football:
                summary: 404 path - football
                value:
                  toy: "football"
              tennis-bat:
                summary: 404 path - tennis-bat
                value:
                  toy: "tennis-bat"
        required: true
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
      x-amazon-apigateway-request-validator: "Validate both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavouriteFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

components:

  parameters:
    SessionHeader:
      name: session-id
      in: header
      description: A UUID generated by the Session API to act as a primary key for the Session in DynamoDB
      required: true
      schema:
        type: "string"
      examples:
        session-s1-good:
          value: scenario-1
        session-s1-auth-400:
          value: scenario-1-400
        session-s1-auth-500:
          value: scenario-1-500
        scenario-3:
          value: scenario-3

  schemas:
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          type: "string"
          minLength: 1
          example: "ipv-toy-stub"
        request:
          type: "string"
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "981bb74c-3b5e-462e-ba3a-abf868e5da68"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    Favourite:
      type: "object"
      properties:
        toy:
          type: "string"
          example: "jigsaw-puzzle"

    Error:
      title: "Error Schema"
      type: "object"
      properties:
        message:
          type: "string"
    Session:
      required:
        - "session_id"
      type: "object"
      properties:
        session_id:
          type: "string"

x-amazon-apigateway-request-validators:
  Validate both:
    validateRequestBody: true
    validateRequestParameters: true
  Validate Param only:
    validateRequestParameters: true
    validateRequestBody: false
